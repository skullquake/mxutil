// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mxutil.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * com.mendix.core.Core.dataStorage().executeWithConnection(...
 */
public class ja_executeWithConnection extends CustomJavaAction<java.lang.String>
{
	private java.lang.String str_sql;
	private mxutil.proxies.enum_fmt enum_fmtParameter1;

	public ja_executeWithConnection(IContext context, java.lang.String str_sql, java.lang.String enum_fmtParameter1)
	{
		super(context);
		this.str_sql = str_sql;
		this.enum_fmtParameter1 = enum_fmtParameter1 == null ? null : mxutil.proxies.enum_fmt.valueOf(enum_fmtParameter1);
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		java.lang.String ret=new java.lang.String();
		this._ret=new java.lang.String();
		this.fmt=enum_fmtParameter1==null?mxutil.proxies.enum_fmt.csv:enum_fmtParameter1;
	 	com.mendix.datastorage.DataStorage ds=com.mendix.core.Core.dataStorage();
		ds.executeWithConnection(this::processResult);
		ret=this._ret;
		return ret;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ja_executeWithConnection";
	}

	// BEGIN EXTRA CODE
	private mxutil.proxies.enum_fmt fmt;
	private java.lang.String _ret;
	private java.lang.String processResult(java.sql.Connection c){
		try{
			java.sql.PreparedStatement stmnt=c.prepareStatement(
				str_sql
			);
			java.sql.ResultSet rset=stmnt.executeQuery();
			switch(this.fmt){
				case csv:
					this.rs2csv(rset);
					break;
				case json:
					this.rs2json(rset);
					break;
				default:
					break;
			};
			rset.close();
		}catch(Exception e){
			this._ret+=e.toString();
		}
		return "test";

	}
	private void rs2csv(java.sql.ResultSet rs){
		try{
			java.sql.ResultSetMetaData rsetmeta=rs.getMetaData();
			for(int i=0;i<rsetmeta.getColumnCount();i++){
				this._ret+=rsetmeta.getColumnName(i+1);
				if(i<rsetmeta.getColumnCount()-1)
					this._ret+=",";
			}
			this._ret+="\n";
			while(rs.next()){
				rsetmeta=rs.getMetaData();
				for(int i=0;i<rsetmeta.getColumnCount();i++){
					try{
						
						this._ret+=rs.getString(new java.lang.String(rsetmeta.getColumnName(i+1)));
					}catch(Exception e){
						this._ret+=e.toString();
					}
					if(i<rsetmeta.getColumnCount()-1)
						this._ret+=",";
				}
				this._ret+="\n";
			}
		}catch(Exception e){
			this._ret+=e.toString();
		}
	}
	private void rs2json(java.sql.ResultSet rs){
		try{
			org.json.JSONArray json=new org.json.JSONArray();
			java.sql.ResultSetMetaData rsmd=rs.getMetaData();
			while(rs.next()) {
				int numColumns = rsmd.getColumnCount();
				org.json.JSONObject obj = new org.json.JSONObject();
				for(int i=1;i<numColumns+1;i++){
					java.lang.String column_name = rsmd.getColumnName(i);
					if(rsmd.getColumnType(i)==java.sql.Types.ARRAY){
						obj.put(column_name, rs.getArray(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.BIGINT){
						obj.put(column_name, rs.getLong(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.BOOLEAN){
						obj.put(column_name, rs.getBoolean(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.BLOB){
						obj.put(column_name, rs.getBlob(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.DOUBLE){
						obj.put(column_name, rs.getDouble(column_name)); 
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.FLOAT){
						obj.put(column_name, rs.getFloat(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.INTEGER){
						obj.put(column_name, rs.getInt(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.NVARCHAR){
						obj.put(column_name, rs.getNString(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.VARCHAR){
						obj.put(column_name, rs.getString(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.TINYINT){
						obj.put(column_name, rs.getInt(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.SMALLINT){
						obj.put(column_name, rs.getInt(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.DATE){
						obj.put(column_name, rs.getDate(column_name));
					}
					else if(rsmd.getColumnType(i)==java.sql.Types.TIMESTAMP){
						obj.put(column_name, rs.getTimestamp(column_name));	 
					}
					else{
						obj.put(column_name, rs.getObject(column_name));
					}
				}
				json.put(obj);
			}
			this._ret+=json.toString(4);
		}catch(Exception e){
			this._ret+=e.toString();
		}
	}
	// END EXTRA CODE
}
